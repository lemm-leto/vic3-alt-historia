# For on_actions launched by the code itself.

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		peoples_springtime.1
		community_patch_monthly.1
	}
	random_events = {
		5 = 0
		1 = opium_wars.1
	}
	effect = {
	}
	# Election Events
	random_events = {
		20 = 0
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
	}
}

on_yearly_pulse_country = { #Krakatoa special pulse
	random_events = {
		47 = 0
		1 = krakatoa.1
	}
	random_events = {
		11 = 0
		1 = tunguska.1
	}
}

on_yearly_pulse_country = {
	random_events = {
		150 = 0

		20 = government_conflicts.1
		20 = government_conflicts.2
		20 = government_conflicts.3
		20 = government_conflicts.4
		20 = government_conflicts.5
		20 = government_conflicts.6
		20 = government_conflicts.7
		20 = government_conflicts.8
		20 = government_conflicts.9
		20 = government_conflicts.10
		20 = government_conflicts.11
		20 = ig_petitions.1 #Landowners want to reverse Suffrage
		20 = ig_petitions.4 #Devout want State Religion
		20 = ig_petitions.7 #Intelligentsia want free speech
		20 = ig_petitions.10 #Rural folk want no conscription
		20 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		20 = ig_petitions.19 #Armed forces want conscription
		20 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship

		20 = ig_placation_events.1
		20 = ig_placation_events.2
		20 = ig_placation_events.3
		#
		10 = goldrush.3
		10 = goldrush.4
		#
		20 = ig_leaders.1
		20 = ig_leaders.2
		20 = ig_leaders.3
		20 = ig_leaders.4
		20 = ig_leaders.5
		20 = ig_leaders.6
		20 = ig_leaders.7

		#Character Events
		20 = character_events.2
		20 = character_events.3
		20 = character_events.4
		20 = character_events.5
		100 = character_events.6
		
		# Border Situations
		20 = neighbor_events.1
		20 = neighbor_events.2
		20 = neighbor_events.3
		20 = neighbor_events.4
		20 = neighbor_events.5
		20 = neighbor_events.6
		20 = neighbor_events.7

		# Commander Events
		20 = commander_events.2
		20 = commander_events.4
		20 = commander_events.5

		# Law Events
		50 = law_events.2
		#50 = law_events.4 # TODO - re-enable this once national security institution is implemented
		50 = law_events.5
		50 = law_events.6

		# Cultural Homeland Events
		20 = cultural_homeland_events.1
		20 = cultural_homeland_events.10
		20 = cultural_homeland_events.20
		20 = cultural_homeland_events.30
		20 = cultural_homeland_events.40
		20 = cultural_homeland_events.50

		# IGs and Revolutions
		20 = ig_revolutions.1
		20 = ig_revolutions.2
		20 = ig_revolutions.3
		20 = ig_revolutions.4
		20 = ig_revolutions.5
		20 = ig_revolutions.6
		20 = ig_revolutions.7
		20 = ig_revolutions.8
		20 = ig_revolutions.9

		# Technology
		20 = technology_events.1
		20 = technology_events.10
		20 = technology_events.20
		20 = technology_events.30
		20 = technology_events.40
		20 = technology_events.50
		
		# Industrial Accidents
		10 = industrial_accident_events.1
		10 = industrial_accident_events.2
		10 = industrial_accident_events.3
		10 = industrial_accident_events.4
		20 = industrial_accident_events.5
		20 = industrial_accident_events.6

		# Crime (Why do police not just comment out crime events?)
		10 = crime_events.1
		10 = crime_events.2
		10 = crime_events.10

		# Obligations
		10 = obligation_events.1
		10 = obligation_events.3
		10 = obligation_events.5
		
		# Prostitution and police
		20 = prostitution.1
		20 = prostitution.2
		20 = prostitution.3
		20 = prostitution.4
		20 = cable_street.1

		#Natural Disasters
		3 = natural_disaster_events.1
		3 = natural_disaster_events.2
		1 = natural_disaster_events.3
		1 = natural_disaster_events.4
		3 = natural_disaster_events.5
		3 = natural_disaster_events.6
		3 = natural_disaster_events.7
		1 = natural_disaster_events.8

		20 = legitimacy_events.1
		20 = legitimacy_events.2
		20 = legitimacy_events.3
		20 = legitimacy_events.4
		20 = legitimacy_events.5
		20 = legitimacy_events.6
		20 = legitimacy_events.7
		20 = legitimacy_events.8

		10 = assassination_events.1

		# Oil Rush Scandal
		20 = oil_rush.5
		
		#Decree
		20 = decree_events.1
		20 = decree_events.2
		20 = decree_events.3
		20 = decree_events.4
		20 = decree_events.5
		20 = decree_events.6
		20 = decree_events.100
		20 = decree_events.101
		20 = decree_events.102
		20 = decree_events.103
		20 = decree_events.104
		20 = decree_events.105
		20 = decree_events.106
		20 = decree_events.107
		20 = decree_events.108
		20 = decree_events.109
		
		50 = strike.5
		50 = strike.6
		50 = strike.7

		10 = opium_wars.8
		
		20 = communism.9
		20 = communism.7

		100 = nihilism.1
		
		#psychology
		20 = psychology_events.1
		20 = psychology_events.2
		20 = psychology_events.3
		20 = psychology_events.4
		20 = psychology_events.6
		
		#nationalism
		20 = fascism_events.8

		20 = dreadnought_hoax.1

		10 = amazon.4 # The Most Dangerous Game

		20 = autocracy.2
		20 = autocracy.3

		# rivalry events
		10 = diplomatic_friction.1
		10 = diplomatic_friction.2
		10 = diplomatic_friction.20

		#trains
		5 = trains.1

		30 = cholera.1

		# Discrimination Events
		20 = discrimination_events.1
		20 = discrimination_events.2
		20 = discrimination_events.3
		20 = discrimination_events.4
	}

	# Springtime of the Peoples
	random_events = {
		5 = 0
		1 = peoples_springtime.6
	}
	
	random_events = {
		30 = 0
		10 = ig_leaders.11 #TODO make sure this is firing at a good pace.
	}
	
	random_events = {
		70 = 0
		#30 = strike.1 #TODO make sure this is firing at a good pace. # Narrator's voice: It was not firing at a good pace.
	}

	random_events = {
		4 = 0
		1 = wedding.1 # on average, monarchs should marry within 5 years of coming of age
	}
}
on_half_yearly_pulse_country = {
	# Secession
	random_events = {
		20 = secession_events.1
		20 = secession_events.2
		20 = secession_events.3
		20 = secession_events.4
		20 = secession_events.5
		20 = secession_events.6
		20 = secession_events.7
		20 = secession_events.8
		20 = secession_events.9
	}
	events = {
		pop_growth_factors.1
	}
}
on_five_year_pulse_country = {
	events = {
		generals.1
	}
}


on_decade_pulse_country = {
	random_events = {
		99 = 0
		1 = plague.1
	}
}

# Root = Character
on_monthly_pulse_character = {}
on_yearly_pulse_character = {
	random_events = {
		20 = character_events.1
	}


}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {
	
}

# Root = State
on_monthly_pulse_state = {
	random_events = {
		10 = goldrush.5
	}

}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {
	random_events = {
		80 = 0
		10 = oil_rush.3
		10 = oil_rush.4
	}
	on_actions = {
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {
	random_events = {
		50 = 0
	}
}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
	}

	events = {
		historical_events.1
	}
}

on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires for all countries with an interest marker in the play's region
# Root = Country who owns the interest marker
# scope:diplomatic_play = The diplomatic play that has been started
on_diplomatic_play_started = {
	events = {
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
		if = {
			limit = {
				is_ruler = no
				exists = interest_group
				interest_group = {
					exists = leader
					leader = prev
					is_in_government = yes
				}
			}
			interest_group = {
				save_scope_as = new_ig_leader_group
			}
			owner = {
				trigger_event = { id = ig_leaders.10 days = 2} 
			}
		}
	}
}

# Root = Character
on_new_ruler = {
	effect = {
		if = {
			limit = {
				exists = owner
				owner = {
					has_law = law_type:law_state_religion
					#Test for State Religion law here
				}
			}
			# set_religion = owner.religion TODO SET_RELIGION
			#Ensure the character has the country's State Religion here
		}
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_used_obligation = {
	effect = {
		post_notification = diplomatic_action_used_obligation_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted_owe_obligation = {
	effect = {
		post_notification = diplomatic_proposal_accepted_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break_used_obligation = {
	effect = {
		post_notification = diplomatic_action_break_used_obligation_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted_owe_obligation = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted_owe_obligation
	}
}


# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:coptic
				}
				ig:ig_devout = {
					set_interest_group_name = ig_coptic_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_coptic_patriarch
				}
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:vajrayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:coptic
				}
				ig:ig_devout = {
					set_interest_group_name = ig_coptic_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_coptic_patriarch
				}
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:vajrayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:coptic
				}
				ig:ig_devout = {
					set_interest_group_name = ig_coptic_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_coptic_patriarch
				}
			}
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	effect = {
		post_notification = resource_discovered
	}
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		post_notification = resource_depleted
	}
	events = {
		goldrush.2
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Country
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
		scope:actor = {
			save_scope_as = initiator_country
		}
		scope:target = {
			save_scope_as = target_country
		}
		while = {
			limit = {
				scope:target_country = {
					is_non_customs_union_subject = yes
				}
			}
			random_country = {
				limit = {
					scope:target_country = {
						is_subject_of = prev
					}
					NOT = {
						any_country = {
							is_subject_of = prev
							scope:target_country = {
								is_subject_of = prev
							}
						}
					}
				}
				save_scope_as = target_overlord
			}
			if = {
				limit = {
					NOR = {
						scope:target_overlord = {
							this = scope:initiator_country
						}
						any_scope_initiator_ally = {
							this = scope:target_overlord
						}
						any_scope_target_ally = {
							this = scope:target_overlord
						}
					}
				}
				add_target_backers = {
					scope:target_overlord
				}
			}
			scope:target_overlord = {
				save_scope_as = target_country
			}
		}
		scope:target_country = {
			add_to_variable_list = {
				name = target_allies
				target = this
			}
			root = {
				every_scope_target_ally = {
					limit = {
						NOT = {
							scope:target_country = {
								is_target_in_variable_list = {
									name = target_allies
									target = prev
								}
							}
						}
					}
					scope:target_country = {
						add_to_variable_list = {
							name = target_allies
							target = prev
						}
					}
				}
			}
			every_in_list = {
				variable = target_allies
				save_scope_as = current_overlord
				every_country = {
					limit = {
						is_subject_of = scope:current_overlord
						save_temporary_scope_as = current_subject
						NOT = {
							any_country = {
								is_subject_of = scope:current_overlord
								scope:current_subject = {
									is_subject_of = prev
								}
							}
						}
						OR = {
							is_subject_type = subject_type_puppet
							is_subject_type = subject_type_vassal
							is_subject_type = subject_type_personal_union
						}
						NOR = {
							this = scope:initiator_country
							this = scope:target_country
							root = {
								any_scope_initiator_ally = {
									this = scope:current_subject
								}
							}
							root = {
								any_scope_target_ally = {
									this = scope:current_subject
								}
							}
						}
					}
					root = {
						add_target_backers = {
							prev
						}
					}
				}
			}
			clear_variable_list = target_allies
		}
	}
}

# Root = Country
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				is_player = yes
				scope:actor = {
					is_player = no
				}
			}
		}
	}
}

# Root = Country
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Country
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Country
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Country
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Country
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Country
on_sway_offer_owe_obligation = {
	effect = {
		post_proposal = proposal_sway_offer_owe_obligation
	}
}


# Root = Country
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Country
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Country
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			trigger_event = law_events.3
			if = {
				limit = { 
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}	
	}
}

# Root = owner Country of the Law
# executed when enactment of any law begins
on_law_enactment_started = {
	events = {
		community_patch_monthly.2
	}
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is success
# (currently, this means the law will get enacted so it will be followed by
# on_law_enactment_ended and on_law_enacted).
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is about to end
on_law_checkpoint_success = {
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		1 = generic_laws.1
		1 = generic_laws.4
		1 = generic_laws.7
		1 = generic_laws.10
	}
	effect = {

	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = law_events.1
		1 = generic_laws.3
		1 = generic_laws.6
		1 = generic_laws.8
		1 = generic_laws.12
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is stall
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even if the resulting event is particularly bad and
# will proceed to stop the enactment
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		1 = generic_laws.2
		1 = generic_laws.5
		1 = generic_laws.8
		1 = generic_laws.11 
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
	events = {
		community_patch_monthly.2
	}
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		if = {
			limit = {
				is_player = yes
				is_revolutionary = yes
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
	effect = {
	}
	
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
}

# Root = Country
on_wargoal_enforced = {
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {

}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
	effect = {
		debug_log = "Sub objective completed"
	}
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	#effect = {
		#post_notification = obligation_owed_by_us_expired
	#}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	#effect = {
		#post_notification = obligation_owed_to_us_expired
	#}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}
